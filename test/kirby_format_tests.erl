-module(kirby_format_tests).

-include_lib("eunit/include/eunit.hrl").
-include("kirby.hrl").
-include("../src/kirby_common.hrl").

seg_entry_v1_test_() ->
     [{"Create small entry",
       fun() -> Data = kirby_test_util:random_binary(32767),
                Entry = kirby_format:make_seg_entry(Data),
                <<Magic:24/integer, Version:8/integer,
                  Checksum:32/integer, Size:64/integer, Payload/binary>> = Entry,
                ?assertEqual(Magic, ?SEG_MAGIC),
                ?assertEqual(Version, ?SEG_VERSION),
                ?assertEqual(Size, size(Data)),
                ?assertEqual(Checksum, erlang:adler32(Data)),
                ?assertMatch(Data, Payload) end},
      {"Create large entry",
       fun() -> Data = kirby_test_util:random_binary(5242469),
                Entry = kirby_format:make_seg_entry(Data),
                <<Magic:24/integer, Version:8/integer,
                  Checksum:32/integer, Size:64/integer, Payload/binary>> = Entry,
                ?assertEqual(Magic, ?SEG_MAGIC),
                ?assertEqual(Version, ?SEG_VERSION),
                ?assertEqual(Size, size(Data)),
                ?assertEqual(Checksum, erlang:adler32(Data)),
                ?assertMatch(Data, Payload) end},
      {"Parse good entry",
       fun() -> Data = kirby_test_util:random_binary(21000),
                Entry = kirby_format:make_seg_entry(Data),
                Checksum = erlang:adler32(Data),
                ?assertMatch({ok, Checksum, Data}, kirby_format:parse_seg_entry(Entry)) end},
      {"Parse truncated entry",
       fun() -> Data = kirby_test_util:random_binary(19777),
                Entry0 = kirby_format:make_seg_entry(Data),
                %% Truncate entry
                <<Entry:144/binary, _Rest/binary>> = Entry0,
                ?assertMatch({error, corrupted_entry}, kirby_format:parse_seg_entry(Entry)) end},
      {"Parse unknown version entry",
       fun() -> Data = kirby_test_util:random_binary(18376),
                Entry0 = kirby_format:make_seg_entry(Data),
                BadVersion = 3,
                <<Magic:24/integer, _Version:8/integer, Rest/binary>> = Entry0,
                Entry = <<Magic:24/integer, BadVersion:8/integer, Rest/binary>>,
                ?assertMatch({error, unknown_version}, kirby_format:parse_seg_entry(Entry)) end},
      {"Bad magic number entry",
       fun() -> Data = kirby_test_util:random_binary(18376),
                Entry0 = kirby_format:make_seg_entry(Data),
                <<_Magic:24/integer, Rest/binary>> = Entry0,
                Entry = <<783:24/integer, Rest/binary>>,
                ?assertMatch({error, corrupted_entry}, kirby_format:parse_seg_entry(Entry)) end},
      {"Bad entry body",
       fun() -> Data = kirby_test_util:random_binary(18376),
                Entry0 = kirby_format:make_seg_entry(Data),
                <<Magic:24/integer, Version:8/integer, Rest/binary>> = Entry0,
                Entry = <<Magic:24/integer, Version:8/integer, Rest:8/binary>>,
                ?assertMatch({error, corrupted_entry}, kirby_format:parse_seg_entry(Entry)) end}].

seg_md_test_() ->
     [{"Create segment metadata",
       fun() -> Start = random:uniform(5000),
               Size = random:uniform(5000) + 5000,
               SegIdx = 1,
               {ok, Md} = kirby_format:make_seg_md(Start, Size, SegIdx),
               <<SegIdx1:16/integer, Start1:64/integer, Size1:64/integer>> = Md,
               ?assertEqual(SegIdx, SegIdx1),
               ?assertEqual(Start, Start1),
               ?assertEqual(Size, Size1) end},
      {"Create and parse segment metadata",
       fun() -> Start = random:uniform(10000) + 50000,
                Size = random:uniform(50000) + 50000,
                SegIdx = random:uniform(100),
                {ok, Md} = kirby_format:make_seg_md(Start, Size, SegIdx),
                ?assertMatch({ok, SegIdx, Start, Size}, kirby_format:parse_seg_md(Md)) end},
      {"Bad start value",
       fun() -> Start = ?MAX_INT64 + 1,
                Size = 50000,
                SegIdx = 1,
                ?assertMatch({error, offset_too_big}, kirby_format:make_seg_md(Start, Size, SegIdx)) end},
      {"Bad size value",
       fun() -> Start = 100,
                Size = ?MAX_INT64 + 1,
                SegIdx = 1,
                ?assertMatch({error, data_too_big}, kirby_format:make_seg_md(Start, Size, SegIdx)) end},
      {"Segment index too big",
       fun() -> Start = 100,
                Size = 100,
                SegIdx = ?MAX_INT16 + 1,
                ?assertMatch({error, idx_too_big}, kirby_format:make_seg_md(Start, Size, SegIdx)) end},
      {"Truncated metadata",
       fun() -> Start = 100,
                Size = 522,
                SegIdx = 1,
                {ok, Md0} = kirby_format:make_seg_md(Start, Size, SegIdx),
                Md = <<Md0:17/binary>>,
                ?assertMatch({error, bad_md}, kirby_format:parse_seg_md(Md)) end}].
